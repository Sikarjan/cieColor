<?php
/*
PHP class to calculate color values from a given spectrum
    Copyright (C) 2016  Sikarjan

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation in version 3 with the addition that any 
    military use is prohibited.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Instructions:
The cass needs to be called like this:
$lightsource = new cie($spectrum);
$spectrum needs to be a 2D array $spectrum = [[wavelength in nm, power in W/nm], [...]]
The wavelength needs to be in an ascending order

Values provided by this class:
Properties listed in the cie class cann be called $lightSource->PROPERTY
The color rendering indixes need to be called like this: $lightSource->cri(9)
*/
class cie{
	public $K;
	public $x;
	public $y;
	public $z;
	public $spectrum;
	public $spectrumCompare;// Simpliefied input spectrum in 5 nm steps for comparison against test sources
	public $spectrumRef; 	// Refence spectrum of light source with same CCT
	public $CCT;
	public $u;
	public $v;
	public $c;
	public $d;
	public $K_ref;
	public $c_ref;
	public $d_ref;
	public $u_ref;
	public $v_ref;
	
	private $c1 = 3.74177e-16;
	private $c2 = 1.43879e-02;
	
	public function __construct($spectrum){
		$this->colorCoords($spectrum);
	}
	
	function colorCoords($spectrum){
		$xSum = 0;
		$ySum = 0;
		$zSum = 0;
		$XSum = 0;
		$YSum = 0;
		$ZSum = 0;
		$index = floor($spectrum[0][0]) > 360 ? floor($spectrum[0][0]):360;	// index to build $spectrumCompare
		$indexEnd = count($spectrum)-1; // Last index of stectrum array
		
		foreach($spectrum as $key => $value){
			$wl = $value[0]; 		// Wavelength in spectrum
			$lambda = floor($wl);	// Wavelength in CMF

			if($lambda >= 360 && $lambda <= 830 && $key < $indexEnd){
				$deltaWl = $spectrum[$key+1][0]-$wl;// Delta wavelength to next wavelength in spectrum
				$deltaLambda = $wl-$lambda;			// Delta between CMF and wavelength
				$power = $value[1]; 				// Power at wavelength in spectrum in W/nm
								
				$xCoff = cie::CMF1931[$lambda][0] + ($deltaLambda*(cie::CMF1931[$lambda+1][0]-cie::CMF1931[$lambda][0]));
        		$xSum += $xCoff * $power * $deltaWl;
				$yCoff = cie::CMF1931[$lambda][1] + ($deltaLambda*(cie::CMF1931[$lambda+1][1]-cie::CMF1931[$lambda][1]));
        		$ySum += $yCoff * $power * $deltaWl;
				$zCoff = cie::CMF1931[$lambda][2] + ($deltaLambda*(cie::CMF1931[$lambda+1][2]-cie::CMF1931[$lambda][2]));
        		$zSum += $zCoff * $power * $deltaWl;
				
				// Build simplified spectrum for CRI calculation
				if($lambda == $index){
					$wl1 = $spectrum[$key-1][0];
					$power1 = $spectrum[$key-1][1];
					$this->spectrumCompare[$index] = $power+($power-$power1)/($wl-$wl1)*($lambda-$wl1);
					$XSum += $this->spectrumCompare[$index] * cie::CMF1931[$lambda][0] * 5;
					$YSum += $this->spectrumCompare[$index] * cie::CMF1931[$lambda][1] * 5;
					$ZSum += $this->spectrumCompare[$index] * cie::CMF1931[$lambda][2] * 5;
					$index += 5;
				}
			}elseif($lambda > 830){
				break;
			}
		}
		
		// Calculate CCT from original spectrum
		$triX = 683.002*$xSum;
		$triY = 683.002*$ySum; // Should equal the lumen value
		$triZ = 683.002*$zSum;

		$triFactor = $triX + $triY + $triZ;
		
		$this->x = $triX/$triFactor;
		$this->y = $triY/$triFactor;
		$this->z = $triZ/$triFactor;
		
		// CCT Calculation
		/* Version 1 */
		$n = ($this->x - 0.3320) / ($this->y - 0.1858);
		$this->CCT = -449*pow($n,3)+3525*pow($n,2)-6823.3*$n+5520.33;
		
		// Version 2
//		$n=($this->x-0.3366)/($this->y-0.1735);
//		$this->CCT = -949.86315+6253.80338*exp(-$n/0.92159)+28.70599*exp(-$n/0.20039)+0.00004*exp(-$n/0.07125);

		// Calculate derived values from simplified spectrum
		$this->K = 100/$YSum;
		
		$this->u = 4*$XSum/($XSum + 15*$YSum + 3*$ZSum);
		$this->v = 6*$YSum/($XSum + 15*$YSum + 3*$ZSum);
		$this->c = (4-$this->u-10*$this->v)/$this->v;
		$this->d = (1.708*$this->v+0.404-1.481*$this->u)/$this->v;
		
		// Refence spectrum 
		$X_ref = 0;
		$Y_ref = 0;
		$Z_ref = 0;
		
		if($this->CCT <= 5000){
			foreach($this->spectrumCompare as $key => $value){
				$this->spectrumRef[$key] = $this->c1/(pow($key*0.000000001,5)*(exp($this->c2/($this->CCT*$key*0.000000001))-1));
				$X_ref += $this->spectrumRef[$key]*cie::CMF1931[$key][0];
				$Y_ref += $this->spectrumRef[$key]*cie::CMF1931[$key][1];
				$Z_ref += $this->spectrumRef[$key]*cie::CMF1931[$key][2];
			}
		}else{
			if($this->CCT <= 7000)
				$x_D = -4.607e9/pow($this->CCT,3)+2.9678e6/pow($this->CCT,2)+0.09911e3/$this->CCT+0.244063;
			else
				$x_D = -2.0064e9/pow($this->CCT,3)+1.9018e6/pow($this->CCT,2)+0.24748e3/$this->CCT+0.23704;
			
			$y_D = -3*$x_D*$x_D+2.87*$x_D-0.275;
			$M_1 = (-1.3515-1.7703*$x_D+5.9114*$y_D)/(0.0241+0.2562*$x_D-0.7341*$y_D);
			$M_2 = (0.03-31.4424*$x_D+30.0717*$y_D)/(0.0241+0.2562*$x_D-0.7341*$y_D);
			
			foreach($this->spectrumCompare as $key => $value){
				$this->spectrumRef[$key] = cie::S[$key][0]+$M_1*cie::S[$key][1]+$M_2*cie::S[$key][2];
				$X_ref += $this->spectrumRef[$key]*cie::CMF1931[$key][0];
				$Y_ref += $this->spectrumRef[$key]*cie::CMF1931[$key][1];
				$Z_ref += $this->spectrumRef[$key]*cie::CMF1931[$key][2];
				}
		}
		
		$this->K_ref = 100/($Y_ref*5);
		
		$u_ref = 4*$X_ref/($X_ref+15*$Y_ref+3*$Z_ref);
		$v_ref = 6*$Y_ref/($X_ref+15*$Y_ref+3*$Z_ref);
		$this->u_ref = $u_ref;
		$this->v_ref = $v_ref;
		
		$this->c_ref = (4-$u_ref-10*$v_ref)/$v_ref;
		$this->d_ref = (1.708*$v_ref+0.404-1.481*$u_ref)/$v_ref;
	}
	
	function cri($i){
		$X = 0;
		$Y = 0;
		$Z = 0;
		$Xref = 0;
		$Yref = 0;
		$Zref = 0;
		
		foreach($this->spectrumCompare as $key => $value){
			$X += $value*cie::CMF1931[$key][0]*cie::tc3_2[$key][$i-1];
			$Y += $value*cie::CMF1931[$key][1]*cie::tc3_2[$key][$i-1];
			$Z += $value*cie::CMF1931[$key][2]*cie::tc3_2[$key][$i-1];
			$Xref += $this->spectrumRef[$key]*cie::CMF1931[$key][0]*5*cie::tc3_2[$key][$i-1];
			$Yref += $this->spectrumRef[$key]*cie::CMF1931[$key][1]*5*cie::tc3_2[$key][$i-1];
			$Zref += $this->spectrumRef[$key]*cie::CMF1931[$key][2]*5*cie::tc3_2[$key][$i-1];
		}

		$u = 4*$X/($X+15*$Y+3*$Z);
		$uRef = 4*$Xref/($Xref+15*$Yref+3*$Zref);
		$v = 6*$Y/($X+15*$Y+3*$Z);
		$vRef = 6*$Yref/($Xref+15*$Yref+3*$Zref);
		
		$c = (4-$u-10*$v)/$v;
		$cRef = (4-$uRef-10*$vRef)/$vRef;
		$d = (1.708*$v+0.404-1.481*$u)/$v;
		$dRef = (1.708*$vRef+0.404-1.481*$uRef)/$vRef;

		$cRel = $this->c_ref*$c/$this->c;
		$dRel = $this->d_ref*$d/$this->d;
		$u_t =(10.872+0.404*$cRel-4*$dRel)/(16.518+1.481*$cRel-$dRel);
		$v_t =5.52/(16.518+1.481*$cRel-$dRel);

		$W = 25*POW($this->K*$Y*5, 1/3)-17; // *5 nm. This was omitted while calculating Y
		$Wref = 25*POW($this->K_ref*$Yref, 1/3)-17;
		$U = 13*$W*($u_t-$this->u_ref); 
		$Uref = 13*$Wref*($uRef-$this->u_ref);
		$V = 13*$W*($v_t-$this->v_ref);
		$Vref = 13*$Wref*($vRef-$this->v_ref);

		$deltaE = sqrt(pow($Uref-$U,2)+pow($Vref-$V,2)+pow($Wref-$W,2));
		
		return 100-4.6*$deltaE;
	}
	
/*
Tables are copied from Lighting Research Center ASSIST recommends... paper Volume 8, Issue 2 March 2010
to be found at http://www.lrc.rpi.edu/programs/solidstate/assist/pdf/AR-SpecifyColorRec-March2010.pdf	
*/
	const CMF1931 = array(
	//	Wavelength	 X				Y				Z
		360 => array(0.0001299,		0,				0.0006061),	
		361 => array(0.000145847,	0.000004393581,	0.0006808792),	
		362 => array(0.0001638021,	0.000004929604,	0.0007651456),	
		363 => array(0.0001840037,	0.000005532136,	0.0008600124),	
		364 => array(0.0002066902,	0.000006208245,	0.0009665928),	
		365 => array(0.0002321,		0.000006965,	0.001086),	
		366 => array(0.000260728,	0.000007813219,	0.001220586),	
		367 => array(0.000293075,	0.000008767336,	0.001372729),	
		368 => array(0.000329388,	0.000009839844,	0.001543579),	
		369 => array(0.000369914,	0.00001104323,	0.001734286),	
		370 => array(0.0004149,		0.00001239,		0.001946),	
		371 => array(0.0004641587,	0.00001388641,	0.002177777),	
		372 => array(0.000518986,	0.00001555728,	0.002435809),	
		373 => array(0.000581854,	0.00001744296,	0.002731953),	
		374 => array(0.0006552347,	0.00001958375,	0.003078064),	
		375 => array(0.0007416,		0.00002202,		0.003486),	
		376 => array(0.0008450296,	0.00002483965,	0.003975227),	
		377 => array(0.0009645268,	0.00002804126,	0.00454088),	
		378 => array(0.001094949,	0.00003153104,	0.00515832),	
		379 => array(0.001231154,	0.00003521521,	0.005802907),	
		380 => array(0.001368,		0.000039,		0.006450001),	
		381 => array(0.00150205,	0.0000428264,	0.007083216),	
		382 => array(0.001642328,	0.0000469146,	0.007745488),	
		383 => array(0.001802382,	0.0000515896,	0.008501152),	
		384 => array(0.001995757,	0.0000571764,	0.009414544),	
		385 => array(0.002236,		0.000064,		0.01054999),	
		386 => array(0.002535385,	0.00007234421,	0.0119658),	
		387 => array(0.002892603,	0.00008221224,	0.01365587),	
		388 => array(0.003300829,	0.00009350816,	0.01558805),	
		389 => array(0.003753236,	0.0001061361,	0.01773015),	
		390 => array(0.004243,		0.00012,		0.02005001),	
		391 => array(0.004762389,	0.000134984,	0.02251136),	
		392 => array(0.005330048,	0.000151492,	0.02520288),	
		393 => array(0.005978712,	0.000170208,	0.02827972),	
		394 => array(0.006741117,	0.000191816,	0.03189704),	
		395 => array(0.00765,		0.000217,		0.03621),	
		396 => array(0.008751373,	0.0002469067,	0.04143771),	
		397 => array(0.01002888,	0.00028124,		0.04750372),	
		398 => array(0.0114217,		0.00031852,		0.05411988),	
		399 => array(0.01286901,	0.0003572667,	0.06099803),	
		400 => array(0.01431,		0.000396,		0.06785001),	
		401 => array(0.01570443,	0.0004337147,	0.07448632),	
		402 => array(0.01714744,	0.000473024,	0.08136156),	
		403 => array(0.01878122,	0.000517876,	0.08915364),	
		404 => array(0.02074801,	0.0005722187,	0.09854048),	
		405 => array(0.02319,		0.00064,		0.1102),	
		406 => array(0.02620736,	0.00072456,		0.1246133),	
		407 => array(0.02978248,	0.0008255,		0.1417017),	
		408 => array(0.03388092,	0.00094116,		0.1613035),	
		409 => array(0.03846824,	0.00106988,		0.1832568),	
		410 => array(0.04351,		0.00121,		0.2074),	
		411 => array(0.0489956,		0.001362091,	0.2336921),	
		412 => array(0.0550226,		0.001530752,	0.2626114),	
		413 => array(0.0617188,		0.001720368,	0.2947746),	
		414 => array(0.069212,		0.001935323,	0.3307985),	
		415 => array(0.07763,		0.00218,		0.3713),	
		416 => array(0.08695811,	0.0024548,		0.4162091),	
		417 => array(0.09717672,	0.002764,		0.4654642),	
		418 => array(0.1084063,		0.0031178,		0.5196948),	
		419 => array(0.1207672,		0.0035264,		0.5795303),	
		420 => array(0.13438,		0.004,			0.6456),	
		421 => array(0.1493582,		0.00454624,		0.7184838),	
		422 => array(0.1653957,		0.00515932,		0.7967133),	
		423 => array(0.1819831,		0.00582928,		0.8778459),	
		424 => array(0.198611,		0.00654616,		0.959439),	
		425 => array(0.21477,		0.0073,			1.0390501),	
		426 => array(0.2301868,		0.008086507,	1.1153673),	
		427 => array(0.2448797,		0.00890872,		1.1884971),	
		428 => array(0.2587773,		0.00976768,		1.2581233),	
		429 => array(0.2718079,		0.01066443,		1.3239296),	
		430 => array(0.2839,		0.0116,			1.3856),	
		431 => array(0.2949438,		0.01257317,		1.4426352),	
		432 => array(0.3048965,		0.01358272,		1.4948035),	
		433 => array(0.3137873,		0.01462968,		1.5421903),	
		434 => array(0.3216454,		0.01571509,		1.5848807),	
		435 => array(0.3285,		0.01684,		1.62296),	
		436 => array(0.3343513,		0.01800736,		1.6564048),	
		437 => array(0.3392101,		0.01921448,		1.6852959),	
		438 => array(0.3431213,		0.02045392,		1.7098745),	
		439 => array(0.3461296,		0.02171824,		1.7303821),	
		440 => array(0.34828,		0.023,			1.74706),	
		441 => array(0.3495999,		0.02429461,		1.7600446),	
		442 => array(0.3501474,		0.02561024,		1.7696233),	
		443 => array(0.350013,		0.02695857,		1.7762637),	
		444 => array(0.349287,		0.02835125,		1.7804334),	
		445 => array(0.34806,		0.0298,			1.7826),	
		446 => array(0.3463733,		0.03131083,		1.7829682),	
		447 => array(0.3442624,		0.03288368,		1.7816998),	
		448 => array(0.3418088,		0.03452112,		1.7791982),	
		449 => array(0.3390941,		0.03622571,		1.7758671),	
		450 => array(0.3362,		0.038,			1.77211),	
		451 => array(0.3331977,		0.03984667,		1.7682589),	
		452 => array(0.3300411,		0.041768,		1.764039),	
		453 => array(0.3266357,		0.043766,		1.7589438),	
		454 => array(0.3228868,		0.04584267,		1.7524663),	
		455 => array(0.3187,		0.048,			1.7441),	
		456 => array(0.3140251,		0.05024368,		1.7335595),	
		457 => array(0.308884,		0.05257304,		1.7208581),	
		458 => array(0.3032904,		0.05498056,		1.7059369),	
		459 => array(0.2972579,		0.05745872,		1.6887372),	
		460 => array(0.2908,		0.06,			1.6692),	
		461 => array(0.2839701,		0.06260197,		1.6475287),	
		462 => array(0.2767214,		0.06527752,		1.6234127),	
		463 => array(0.2689178,		0.06804208,		1.5960223),	
		464 => array(0.2604227,		0.07091109,		1.564528),	
		465 => array(0.2511,		0.0739,			1.5281),	
		466 => array(0.2408475,		0.077016,		1.4861114),	
		467 => array(0.2298512,		0.0802664,		1.4395215),	
		468 => array(0.2184072,		0.0836668,		1.3898799),	
		469 => array(0.2068115,		0.0872328,		1.3387362),	
		470 => array(0.19536,		0.09098,		1.28764),	
		471 => array(0.1842136,		0.09491755,		1.2374223),	
		472 => array(0.1733273,		0.09904584,		1.1878243),	
		473 => array(0.1626881,		0.1033674,		1.1387611),	
		474 => array(0.1522833,		0.1078846,		1.090148),	
		475 => array(0.1421,		0.1126,			1.0419),	
		476 => array(0.1321786,		0.117532,		0.9941976),	
		477 => array(0.1225696,		0.1226744,		0.9473473),	
		478 => array(0.1132752,		0.1279928,		0.9014531),	
		479 => array(0.1042979,		0.1334528,		0.8566193),	
		480 => array(0.09564,		0.13902,		0.8129501),	
		481 => array(0.08729955,	0.1446764,		0.7705173),	
		482 => array(0.07930804,	0.1504693,		0.7294448),	
		483 => array(0.07171776,	0.1564619,		0.6899136),	
		484 => array(0.06458099,	0.1627177,		0.6521049),	
		485 => array(0.05795001,	0.1693,			0.6162),	
		486 => array(0.05186211,	0.1762431,		0.5823286),	
		487 => array(0.04628152,	0.1835581,		0.5504162),	
		488 => array(0.04115088,	0.1912735,		0.5203376),	
		489 => array(0.03641283,	0.199418,		0.4919673),	
		490 => array(0.03201,		0.20802,		0.46518),	
		491 => array(0.0279172,		0.2171199,		0.4399246),	
		492 => array(0.0241444,		0.2267345,		0.4161836),	
		493 => array(0.020687,		0.2368571,		0.3938822),	
		494 => array(0.0175404,		0.2474812,		0.3729459),	
		495 => array(0.0147,		0.2586,			0.3533),	
		496 => array(0.01216179,	0.2701849,		0.3348578),	
		497 => array(0.00991996,	0.2822939,		0.3175521),	
		498 => array(0.00796724,	0.2950505,		0.3013375),	
		499 => array(0.006296346,	0.308578,		0.2861686),	
		500 => array(0.0049,		0.323,			0.272),	
		501 => array(0.003777173,	0.3384021,		0.2588171),	
		502 => array(0.00294532,	0.3546858,		0.2464838),	
		503 => array(0.00242488,	0.3716986,		0.2347718),	
		504 => array(0.002236293,	0.3892875,		0.2234533),	
		505 => array(0.0024,		0.4073,			0.2123),	
		506 => array(0.00292552,	0.4256299,		0.2011692),	
		507 => array(0.00383656,	0.4443096,		0.1901196),	
		508 => array(0.00517484,	0.4633944,		0.1792254),	
		509 => array(0.00698208,	0.4829395,		0.1685608),	
		510 => array(0.0093,		0.503,			0.1582),	
		511 => array(0.01214949,	0.5235693,		0.1481383),	
		512 => array(0.01553588,	0.544512,		0.1383758),	
		513 => array(0.01947752,	0.56569,		0.1289942),	
		514 => array(0.02399277,	0.5869653,		0.1200751),	
		515 => array(0.0291,		0.6082,			0.1117),	
		516 => array(0.03481485,	0.6293456,		0.1039048),	
		517 => array(0.04112016,	0.6503068,		0.09666748),	
		518 => array(0.04798504,	0.6708752,		0.08998272),	
		519 => array(0.05537861,	0.6908424,		0.08384531),	
		520 => array(0.06327,		0.71,			0.07824999),	
		521 => array(0.07163501,	0.7281852,		0.07320899),	
		522 => array(0.08046224,	0.7454636,		0.06867816),	
		523 => array(0.08973996,	0.7619694,		0.06456784),	
		524 => array(0.09945645,	0.7778368,		0.06078835),	
		525 => array(0.1096,		0.7932,			0.05725001),	
		526 => array(0.1201674,		0.8081104,		0.05390435),	
		527 => array(0.1311145,		0.8224962,		0.05074664),	
		528 => array(0.1423679,		0.8363068,		0.04775276),	
		529 => array(0.1538542,		0.8494916,		0.04489859),	
		530 => array(0.1655,		0.862,			0.04216),	
		531 => array(0.1772571,		0.8738108,		0.03950728),	
		532 => array(0.18914,		0.8849624,		0.03693564),	
		533 => array(0.2011694,		0.8954936,		0.03445836),	
		534 => array(0.2133658,		0.9054432,		0.03208872),	
		535 => array(0.2257499,		0.9148501,		0.02984),	
		536 => array(0.2383209,		0.9237348,		0.02771181),	
		537 => array(0.2510668,		0.9320924,		0.02569444),	
		538 => array(0.2639922,		0.9399226,		0.02378716),	
		539 => array(0.2771017,		0.9472252,		0.02198925),	
		540 => array(0.2904,		0.954,			0.0203),	
		541 => array(0.3038912,		0.9602561,		0.01871805),	
		542 => array(0.3175726,		0.9660074,		0.01724036),	
		543 => array(0.3314384,		0.9712606,		0.01586364),	
		544 => array(0.3454828,		0.9760225,		0.01458461),	
		545 => array(0.3597,		0.9803,			0.0134),	
		546 => array(0.3740839,		0.9840924,		0.01230723),	
		547 => array(0.3886396,		0.9874182,		0.01130188),	
		548 => array(0.4033784,		0.9903128,		0.01037792),	
		549 => array(0.4183115,		0.9928116,		0.009529306),	
		550 => array(0.4334499,		0.9949501,		0.008749999),	
		551 => array(0.4487953,		0.9967108,		0.0080352),	
		552 => array(0.464336,		0.9980983,		0.0073816),	
		553 => array(0.480064,		0.999112,		0.0067854),	
		554 => array(0.4959713,		0.9997482,		0.0062428),	
		555 => array(0.5120501,		1		,		0.005749999),	
		556 => array(0.5282959,		0.9998567,		0.0053036),	
		557 => array(0.5446916,		0.9993046,		0.0048998),	
		558 => array(0.5612094,		0.9983255,		0.0045342),	
		559 => array(0.5778215,		0.9968987,		0.0042024),	
		560 => array(0.5945,		0.995,			0.0039),	
		561 => array(0.6112209,		0.9926005,		0.0036232),	
		562 => array(0.6279758,		0.9897426,		0.0033706),	
		563 => array(0.6447602,		0.9864444,		0.0031414),	
		564 => array(0.6615697,		0.9827241,		0.0029348),	
		565 => array(0.6784,		0.9786,			0.002749999),	
		566 => array(0.6952392,		0.9740837,		0.0025852),	
		567 => array(0.7120586,		0.9691712,		0.0024386),	
		568 => array(0.7288284,		0.9638568,		0.0023094),	
		569 => array(0.7455188,		0.9581349,		0.0021968),	
		570 => array(0.7621,		0.952,			0.0021),	
		571 => array(0.7785432,		0.9454504,		0.002017733),	
		572 => array(0.7948256,		0.9384992,		0.0019482),	
		573 => array(0.8109264,		0.9311628,		0.0018898),	
		574 => array(0.8268248,		0.9234576,		0.001840933),	
		575 => array(0.8425,		0.9154,			0.0018),	
		576 => array(0.8579325,		0.9070064,		0.001766267),	
		577 => array(0.8730816,		0.8982772,		0.0017378),	
		578 => array(0.8878944,		0.8892048,		0.0017112),	
		579 => array(0.9023181,		0.8797816,		0.001683067),	
		580 => array(0.9163,		0.87,			0.001650001),	
		581 => array(0.9297995,		0.8598613,		0.001610133),	
		582 => array(0.9427984,		0.849392,		0.0015644),	
		583 => array(0.9552776,		0.838622,		0.0015136),	
		584 => array(0.9672179,		0.8275813,		0.001458533),	
		585 => array(0.9786,		0.8163,			0.0014),	
		586 => array(0.9893856,		0.8047947,		0.001336667),	
		587 => array(0.9995488,		0.793082,		0.00127),	
		588 => array(1.0090892,		0.781192,		0.001205),	
		589 => array(1.0180064,		0.7691547,		0.001146667),	
		590 => array(1.0263,		0.757,			0.0011),	
		591 => array(1.0339827,		0.7447541,		0.0010688),	
		592 => array(1.040986,		0.7324224,		0.0010494),	
		593 => array(1.047188,		0.7200036,		0.0010356),	
		594 => array(1.0524667,		0.7074965,		0.0010212),	
		595 => array(1.0567,		0.6949,			0.001),	
		596 => array(1.0597944,		0.6822192,		0.00096864),	
		597 => array(1.0617992,		0.6694716,		0.00092992),	
		598 => array(1.0628068,		0.6566744,		0.00088688),	
		599 => array(1.0629096,		0.6438448,		0.00084256),	
		600 => array(1.0622,		0.631,			0.0008),	
		601 => array(1.0607352,		0.6181555,		0.00076096),	
		602 => array(1.0584436,		0.6053144,		0.00072368),	
		603 => array(1.0552244,		0.5924756,		0.00068592),	
		604 => array(1.0509768,		0.5796379,		0.00064544),	
		605 => array(1.0456,		0.5668,			0.0006),	
		606 => array(1.0390369,		0.5539611,		0.0005478667),	
		607 => array(1.0313608,		0.5411372,		0.0004916),	
		608 => array(1.0226662,		0.5283528,		0.0004354),	
		609 => array(1.0130477,		0.5156323,		0.0003834667),	
		610 => array(1.0026,		0.503,			0.00034),	
		611 => array(0.9913675,		0.4904688,		0.0003072533),	
		612 => array(0.9793314,		0.4780304,		0.00028316),	
		613 => array(0.9664916,		0.4656776,		0.00026544),	
		614 => array(0.9528479,		0.4534032,		0.0002518133),	
		615 => array(0.9384,		0.4412,			0.00024),	
		616 => array(0.923194,		0.42908,		0.0002295467),	
		617 => array(0.907244,		0.417036,		0.00022064),	
		618 => array(0.890502,		0.405032,		0.00021196),	
		619 => array(0.87292,		0.393032,		0.0002021867),	
		620 => array(0.8544499,		0.381,			0.00019),	
		621 => array(0.835084,		0.3689184,		0.0001742133),	
		622 => array(0.814946,		0.3568272,		0.00015564),	
		623 => array(0.794186,		0.3447768,		0.00013596),	
		624 => array(0.772954,		0.3328176,		0.0001168533),	
		625 => array(0.7514,		0.321,			0.0001),	
		626 => array(0.7295836,		0.3093381,		0.00008613333),	
		627 => array(0.7075888,		0.2978504,		0.0000746),	
		628 => array(0.6856022,		0.2865936,		0.000065),	
		629 => array(0.6638104,		0.2756245,		0.00005693333),	
		630 => array(0.6424,		0.265,			0.00004999999),	
		631 => array(0.6215149,		0.2547632,		0.00004416),	
		632 => array(0.6011138,		0.2448896,		0.00003948),	
		633 => array(0.5811052,		0.2353344,		0.00003572),	
		634 => array(0.5613977,		0.2260528,		0.00003264),	
		635 => array(0.5419,		0.217,			0.00003),	
		636 => array(0.5225995,		0.2081616,		0.00002765333),	
		637 => array(0.5035464,		0.1995488,		0.00002556),	
		638 => array(0.4847436,		0.1911552,		0.00002364),	
		639 => array(0.4661939,		0.1829744,		0.00002181333),	
		640 => array(0.4479,		0.175,			0.00002),	
		641 => array(0.4298613,		0.1672235,		0.00001813333),	
		642 => array(0.412098,		0.1596464,		0.0000162),	
		643 => array(0.394644,		0.1522776,		0.0000142),	
		644 => array(0.3775333,		0.1451259,		0.00001213333),	
		645 => array(0.3608,		0.1382,			0.00001),	
		646 => array(0.3444563,		0.1315003,		0.000007733333),	
		647 => array(0.3285168,		0.1250248,		0.0000054),	
		648 => array(0.3130192,		0.1187792,		0.0000032),	
		649 => array(0.2980011,		0.1127691,		0.000001333333),	
		650 => array(0.2835,		0.107,			0),
		651 => array(0.2695448,		0.1014762,		0),	
		652 => array(0.2561184,		0.09618864,		0),	
		653 => array(0.2431896,		0.09112296,		0),	
		654 => array(0.2307272,		0.08626485,		0),	
		655 => array(0.2187,		0.0816,			0),	
		656 => array(0.2070971,		0.07712064,		0),	
		657 => array(0.1959232,		0.07282552,		0),	
		658 => array(0.1851708,		0.06871008,		0),	
		659 => array(0.1748323,		0.06476976,		0),	
		660 => array(0.1649,		0.061,			0),
		661 => array(0.1553667,		0.05739621,		0),	
		662 => array(0.14623,		0.05395504,		0),	
		663 => array(0.13749,		0.05067376,		0),	
		664 => array(0.1291467,		0.04754965,		0),	
		665 => array(0.1212,		0.04458,		0),	
		666 => array(0.1136397,		0.04175872,		0),	
		667 => array(0.106465,		0.03908496,		0),	
		668 => array(0.09969044,	0.03656384,		0),	
		669 => array(0.09333061,	0.03420048,		0),	
		670 => array(0.0874,		0.032,			0),	
		671 => array(0.08190096,	0.02996261,		0),	
		672 => array(0.07680428,	0.02807664,		0),	
		673 => array(0.07207712,	0.02632936,		0),	
		674 => array(0.06768664,	0.02470805,		0),	
		675 => array(0.0636,		0.0232,			0),	
		676 => array(0.05980685,	0.02180077,		0),	
		677 => array(0.05628216,	0.02050112,		0),	
		678 => array(0.05297104,	0.01928108,		0),	
		679 => array(0.04981861,	0.01812069,		0),	
		680 => array(0.04677,		0.017,			0),	
		681 => array(0.04378405,	0.01590379,		0),	
		682 => array(0.04087536,	0.01483718,		0),	
		683 => array(0.03807264,	0.01381068,		0),	
		684 => array(0.03540461,	0.01283478,		0),	
		685 => array(0.0329,		0.01192,		0),	
		686 => array(0.03056419,	0.01106831,		0),	
		687 => array(0.02838056,	0.01027339,		0),	
		688 => array(0.02634484,	0.009533311,	0),	
		689 => array(0.02445275,	0.008846157,	0),	
		690 => array(0.0227,		0.00821,		0),	
		691 => array(0.02108429,	0.007623781,	0),	
		692 => array(0.01959988,	0.007085424,	0),	
		693 => array(0.01823732,	0.006591476,	0),	
		694 => array(0.01698717,	0.006138485,	0),	
		695 => array(0.01584,		0.005723,		0),	
		696 => array(0.01479064,	0.005343059,	0),	
		697 => array(0.01383132,	0.004995796,	0),	
		698 => array(0.01294868,	0.004676404,	0),	
		699 => array(0.0121292,		0.004380075,	0),	
		700 => array(0.01135916,	0.004102,		0),	
		701 => array(0.01062935,	0.003838453,	0),	
		702 => array(0.009938846,	0.003589099,	0),	
		703 => array(0.009288422,	0.003354219,	0),	
		704 => array(0.008678854,	0.003134093,	0),	
		705 => array(0.008110916,	0.002929,		0),	
		706 => array(0.007582388,	0.002738139,	0),	
		707 => array(0.007088746,	0.002559876,	0),	
		708 => array(0.006627313,	0.002393244,	0),	
		709 => array(0.006195408,	0.002237275,	0),	
		710 => array(0.005790346,	0.002091,		0),	
		711 => array(0.005409826,	0.001953587,	0),	
		712 => array(0.005052583,	0.00182458,		0),	
		713 => array(0.004717512,	0.00170358,		0),	
		714 => array(0.004403507,	0.001590187,	0),	
		715 => array(0.004109457,	0.001484,		0),	
		716 => array(0.003833913,	0.001384496,	0),	
		717 => array(0.003575748,	0.001291268,	0),	
		718 => array(0.003334342,	0.001204092,	0),	
		719 => array(0.003109075,	0.001122744,	0),	
		720 => array(0.002899327,	0.001047,		0),	
		721 => array(0.002704348,	0.0009765896,	0),	
		722 => array(0.00252302,	0.0009111088,	0),	
		723 => array(0.002354168,	0.0008501332,	0),	
		724 => array(0.002196616,	0.0007932384,	0),	
		725 => array(0.00204919,	0.00074,		0),	
		726 => array(0.00191096,	0.0006900827,	0),	
		727 => array(0.001781438,	0.00064331,		0),	
		728 => array(0.00166011,	0.000599496,	0),	
		729 => array(0.001546459,	0.0005584547,	0),	
		730 => array(0.001439971,	0.00052,		0),	
		731 => array(0.001340042,	0.0004839136,	0),	
		732 => array(0.001246275,	0.0004500528,	0),	
		733 => array(0.001158471,	0.0004183452,	0),	
		734 => array(0.00107643,	0.0003887184,	0),	
		735 => array(0.0009999493,	0.0003611,		0),	
		736 => array(0.0009287358,	0.0003353835,	0),	
		737 => array(0.0008624332,	0.0003114404,	0),	
		738 => array(0.0008007503,	0.0002891656,	0),	
		739 => array(0.000743396,	0.0002684539,	0),	
		740 => array(0.0006900786,	0.0002492,		0),	
		741 => array(0.0006405156,	0.0002313019,	0),	
		742 => array(0.0005945021,	0.0002146856,	0),	
		743 => array(0.0005518646,	0.0001992884,	0),	
		744 => array(0.000512429,	0.0001850475,	0),	
		745 => array(0.0004760213,	0.0001719,		0),	
		746 => array(0.0004424536,	0.0001597781,	0),	
		747 => array(0.0004115117,	0.0001486044,	0),	
		748 => array(0.0003829814,	0.0001383016,	0),	
		749 => array(0.0003566491,	0.0001287925,	0),	
		750 => array(0.0003323011,	0.00012,		0),	
		751 => array(0.0003097586,	0.0001118595,	0),	
		752 => array(0.0002888871,	0.0001043224,	0),	
		753 => array(0.0002695394,	0.0000973356,	0),	
		754 => array(0.0002515682,	0.00009084587,	0),	
		755 => array(0.0002348261,	0.0000848,		0),	
		756 => array(0.000219171,	0.00007914667,	0),	
		757 => array(0.0002045258,	0.000073858,	0),	
		758 => array(0.0001908405,	0.000068916,	0),	
		759 => array(0.0001780654,	0.00006430267,	0),	
		760 => array(0.0001661505,	0.00006,		0),	
		761 => array(0.0001550236,	0.00005598187,	0),	
		762 => array(0.0001446219,	0.0000522256,	0),	
		763 => array(0.0001349098,	0.0000487184,	0),	
		764 => array(0.000125852,	0.00004544747,	0),	
		765 => array(0.000117413,	0.0000424,		0),	
		766 => array(0.0001095515,	0.00003956104,	0),	
		767 => array(0.0001022245,	0.00003691512,	0),	
		768 => array(0.00009539445,	0.00003444868,	0),	
		769 => array(0.0000890239,	0.00003214816,	0),	
		770 => array(0.00008307527,	0.00003,		0),	
		771 => array(0.00007751269,	0.00002799125,	0),	
		772 => array(0.00007231304,	0.00002611356,	0),	
		773 => array(0.00006745778,	0.00002436024,	0),	
		774 => array(0.00006292844,	0.00002272461,	0),	
		775 => array(0.00005870652,	0.0000212,		0),	
		776 => array(0.00005477028,	0.00001977855,	0),	
		777 => array(0.00005109918,	0.00001845285,	0),	
		778 => array(0.00004767654,	0.00001721687,	0),	
		779 => array(0.00004448567,	0.00001606459,	0),	
		780 => array(0.00004150994,	0.00001499,		0),	
		781 => array(0.00003873324,	0.00001398728,	0),	
		782 => array(0.00003614203,	0.00001305155,	0),	
		783 => array(0.00003372352,	0.00001217818,	0),	
		784 => array(0.00003146487,	0.00001136254,	0),	
		785 => array(0.00002935326,	0.0000106,		0),	
		786 => array(0.00002737573,	0.000009885877,	0),	
		787 => array(0.00002552433,	0.000009217304,	0),	
		788 => array(0.00002379376,	0.000008592362,	0),	
		789 => array(0.0000221787,	0.000008009133,	0),	
		790 => array(0.00002067383,	0.0000074657,	0),	
		791 => array(0.00001927226,	0.000006959567,	0),	
		792 => array(0.0000179664,	0.000006487995,	0),	
		793 => array(0.00001674991,	0.000006048699,	0),	
		794 => array(0.00001561648,	0.000005639396,	0),	
		795 => array(0.00001455977,	0.0000052578,	0),	
		796 => array(0.00001357387,	0.000004901771,	0),	
		797 => array(0.00001265436,	0.00000456972,	0),	
		798 => array(0.00001179723,	0.000004260194,	0),	
		799 => array(0.00001099844,	0.000003971739,	0),	
		800 => array(0.00001025398,	0.0000037029,	0),	
		801 => array(0.000009559646,0.000003452163,	0),	
		802 => array(0.000008912044,0.000003218302,	0),	
		803 => array(0.000008308358,0.0000030003,	0),	
		804 => array(0.000007745769,0.000002797139,	0),	
		805 => array(0.000007221456,0.0000026078,	0),	
		806 => array(0.000006732475,0.00000243122,	0),	
		807 => array(0.000006276423,0.000002266531,	0),	
		808 => array(0.000005851304,0.000002113013,	0),	
		809 => array(0.000005455118,0.000001969943,	0),	
		810 => array(0.000005085868,0.0000018366,	0),	
		811 => array(0.000004741466,0.00000171223,	0),	
		812 => array(0.000004420236,0.000001596228,	0),	
		813 => array(0.000004120783,0.00000148809,	0),	
		814 => array(0.000003841716,0.000001387314,	0),	
		815 => array(0.000003581652,0.0000012934,	0),	
		816 => array(0.000003339127,0.00000120582,	0),	
		817 => array(0.000003112949,0.000001124143,	0),	
		818 => array(0.000002902121,0.000001048009,	0),	
		819 => array(0.000002705645,0.0000009770578,0),	
		820 => array(0.000002522525,0.00000091093,	0),	
		821 => array(0.000002351726,0.0000008492513,0),	
		822 => array(0.000002192415,0.0000007917212,0),	
		823 => array(0.000002043902,0.0000007380904,0),	
		824 => array(0.000001905497,0.0000006881098,0),	
		825 => array(0.000001776509,0.00000064153,	0),	
		826 => array(0.000001656215,0.0000005980895,0),	
		827 => array(0.000001544022,0.0000005575746,0),	
		828 => array(0.00000143944,	0.000000519808,	0),	
		829 => array(0.000001341977,0.0000004846123,0),	
		830 => array(0.000001251141,0.00000045181,	0),
		831 => array(0.000001167514,0.00000042294,	0),
		835 => array(0.000000624251,0.00000020239,	0)
	);
	
	const tc3_2 = array(
	//	WL			 TCS01	TCS02	TCS03	TCS04	TCS05	TCS06	TCS07	TCS08	TCS09	TCS10	TCS11	TCS12	TCS13	TCS14	TCS15 
		360 => array(0.116,	0.053,	0.058,	0.057,	0.143,	0.079,	0.150,	0.075,	0.069,	0.042,	0.074,	0.189,	0.071,	0.036,	0),	
		365 => array(0.136,	0.055,	0.059,	0.059,	0.187,	0.081,	0.177,	0.078,	0.072,	0.043,	0.079,	0.175,	0.076,	0.036,	0),	
		370 => array(0.159,	0.059,	0.061,	0.062,	0.233,	0.089,	0.218,	0.084,	0.073,	0.045,	0.086,	0.158,	0.082,	0.036,	0),	
		375 => array(0.190,	0.064,	0.063,	0.067,	0.269,	0.113,	0.293,	0.090,	0.070,	0.047,	0.098,	0.139,	0.090,	0.036,	0),		
		380 => array(0.219,	0.070,	0.065,	0.074,	0.295,	0.151,	0.378,	0.104,	0.066,	0.050,	0.111,	0.120,	0.104,	0.036,	0.131),	
		385 => array(0.239,	0.079,	0.068,	0.083,	0.306,	0.203,	0.459,	0.129,	0.062,	0.054,	0.121,	0.103,	0.127,	0.036,	0.139),	
		390 => array(0.252,	0.089,	0.070,	0.093,	0.310,	0.265,	0.524,	0.170,	0.058,	0.059,	0.127,	0.090,	0.161,	0.037,	0.147),	
		395 => array(0.256,	0.101,	0.072,	0.105,	0.312,	0.339,	0.546,	0.240,	0.055,	0.063,	0.129,	0.082,	0.211,	0.038,	0.153),	
		400 => array(0.256,	0.111,	0.073,	0.116,	0.313,	0.410,	0.551,	0.319,	0.052,	0.066,	0.127,	0.076,	0.264,	0.039,	0.158),	
		405 => array(0.254,	0.116,	0.073,	0.121,	0.315,	0.464,	0.555,	0.416,	0.052,	0.067,	0.121,	0.068,	0.313,	0.039,	0.162),	
		410 => array(0.252,	0.118,	0.074,	0.124,	0.319,	0.492,	0.559,	0.462,	0.051,	0.068,	0.116,	0.064,	0.341,	0.040,	0.164),	
		415 => array(0.248,	0.120,	0.074,	0.126,	0.322,	0.508,	0.560,	0.482,	0.050,	0.069,	0.112,	0.065,	0.352,	0.041,	0.167),	
		420 => array(0.244,	0.121,	0.074,	0.128,	0.326,	0.517,	0.561,	0.490,	0.050,	0.069,	0.108,	0.075,	0.359,	0.042,	0.17),	
		425 => array(0.240,	0.122,	0.073,	0.131,	0.330,	0.524,	0.558,	0.488,	0.049,	0.070,	0.105,	0.093,	0.361,	0.042,	0.175),	
		430 => array(0.237,	0.122,	0.073,	0.135,	0.334,	0.531,	0.556,	0.482,	0.048,	0.072,	0.104,	0.123,	0.364,	0.043,	0.182),	
		435 => array(0.232,	0.122,	0.073,	0.139,	0.339,	0.538,	0.551,	0.473,	0.047,	0.073,	0.104,	0.160,	0.365,	0.044,	0.192),	
		440 => array(0.230,	0.123,	0.073,	0.144,	0.346,	0.544,	0.544,	0.462,	0.046,	0.076,	0.105,	0.207,	0.367,	0.044,	0.203),	
		445 => array(0.226,	0.124,	0.073,	0.151,	0.352,	0.551,	0.535,	0.450,	0.044,	0.078,	0.106,	0.256,	0.369,	0.045,	0.212),	
		450 => array(0.225,	0.127,	0.074,	0.161,	0.360,	0.556,	0.522,	0.439,	0.042,	0.083,	0.110,	0.300,	0.372,	0.045,	0.221),	
		455 => array(0.222,	0.128,	0.075,	0.172,	0.369,	0.556,	0.506,	0.426,	0.041,	0.088,	0.115,	0.331,	0.374,	0.046,	0.229),	
		460 => array(0.220,	0.131,	0.077,	0.186,	0.381,	0.554,	0.488,	0.413,	0.038,	0.095,	0.123,	0.346,	0.376,	0.047,	0.236),	
		465 => array(0.218,	0.134,	0.080,	0.205,	0.394,	0.549,	0.469,	0.397,	0.035,	0.103,	0.134,	0.347,	0.379,	0.048,	0.243),	
		470 => array(0.216,	0.138,	0.085,	0.229,	0.403,	0.541,	0.448,	0.382,	0.033,	0.113,	0.148,	0.341,	0.384,	0.050,	0.249),	
		475 => array(0.214,	0.143,	0.094,	0.254,	0.410,	0.531,	0.429,	0.366,	0.031,	0.125,	0.167,	0.328,	0.389,	0.052,	0.254),	
		480 => array(0.214,	0.150,	0.109,	0.281,	0.415,	0.519,	0.408,	0.352,	0.030,	0.142,	0.192,	0.307,	0.397,	0.055,	0.259),	
		485 => array(0.214,	0.159,	0.126,	0.308,	0.418,	0.504,	0.385,	0.337,	0.029,	0.162,	0.219,	0.282,	0.405,	0.057,	0.264),	
		490 => array(0.216,	0.174,	0.148,	0.332,	0.419,	0.488,	0.363,	0.325,	0.028,	0.189,	0.252,	0.257,	0.416,	0.062,	0.269),	
		495 => array(0.218,	0.190,	0.172,	0.352,	0.417,	0.469,	0.341,	0.310,	0.028,	0.219,	0.291,	0.230,	0.429,	0.067,	0.276),	
		500 => array(0.223,	0.207,	0.198,	0.370,	0.413,	0.450,	0.324,	0.299,	0.028,	0.262,	0.325,	0.204,	0.443,	0.075,	0.284),	
		505 => array(0.225,	0.225,	0.221,	0.383,	0.409,	0.431,	0.311,	0.289,	0.029,	0.305,	0.347,	0.178,	0.454,	0.083,	0.291),	
		510 => array(0.226,	0.242,	0.241,	0.390,	0.403,	0.414,	0.301,	0.283,	0.030,	0.365,	0.356,	0.154,	0.461,	0.092,	0.296),	
		515 => array(0.226,	0.253,	0.260,	0.394,	0.396,	0.395,	0.291,	0.276,	0.030,	0.416,	0.353,	0.129,	0.466,	0.100,	0.298),	
		520 => array(0.225,	0.260,	0.278,	0.395,	0.389,	0.377,	0.283,	0.270,	0.031,	0.465,	0.346,	0.109,	0.469,	0.108,	0.296),	
		525 => array(0.225,	0.264,	0.302,	0.392,	0.381,	0.358,	0.273,	0.262,	0.031,	0.509,	0.333,	0.090,	0.471,	0.121,	0.289),	
		530 => array(0.227,	0.267,	0.339,	0.385,	0.372,	0.341,	0.265,	0.256,	0.032,	0.546,	0.314,	0.075,	0.474,	0.133,	0.282),	
		535 => array(0.230,	0.269,	0.370,	0.377,	0.363,	0.325,	0.260,	0.251,	0.032,	0.581,	0.294,	0.062,	0.476,	0.142,	0.276),	
		540 => array(0.236,	0.272,	0.392,	0.367,	0.353,	0.309,	0.257,	0.250,	0.033,	0.610,	0.271,	0.051,	0.483,	0.150,	0.274),	
		545 => array(0.245,	0.276,	0.399,	0.354,	0.342,	0.293,	0.257,	0.251,	0.034,	0.634,	0.248,	0.041,	0.490,	0.154,	0.276),	
		550 => array(0.253,	0.282,	0.400,	0.341,	0.331,	0.279,	0.259,	0.254,	0.035,	0.653,	0.227,	0.035,	0.506,	0.155,	0.281),	
		555 => array(0.262,	0.289,	0.393,	0.327,	0.320,	0.265,	0.260,	0.258,	0.037,	0.666,	0.206,	0.029,	0.526,	0.152,	0.286),	
		560 => array(0.272,	0.299,	0.380,	0.312,	0.308,	0.253,	0.260,	0.264,	0.041,	0.678,	0.188,	0.025,	0.553,	0.147,	0.291),	
		565 => array(0.283,	0.309,	0.365,	0.296,	0.296,	0.241,	0.258,	0.269,	0.044,	0.687,	0.170,	0.022,	0.582,	0.140,	0.289),	
		570 => array(0.298,	0.322,	0.349,	0.280,	0.284,	0.234,	0.256,	0.272,	0.048,	0.693,	0.153,	0.019,	0.618,	0.133,	0.286),	
		575 => array(0.318,	0.329,	0.332,	0.263,	0.271,	0.227,	0.254,	0.274,	0.052,	0.698,	0.138,	0.017,	0.651,	0.125,	0.28),
		580 => array(0.341,	0.335,	0.315,	0.247,	0.260,	0.225,	0.254,	0.278,	0.060,	0.701,	0.125,	0.017,	0.680,	0.118,	0.285),	
		585 => array(0.367,	0.339,	0.299,	0.229,	0.247,	0.222,	0.259,	0.284,	0.076,	0.704,	0.114,	0.017,	0.701,	0.112,	0.314),	
		590 => array(0.390,	0.341,	0.285,	0.214,	0.232,	0.221,	0.270,	0.295,	0.102,	0.705,	0.106,	0.016,	0.717,	0.106,	0.354),	
		595 => array(0.409,	0.341,	0.272,	0.198,	0.220,	0.220,	0.284,	0.316,	0.136,	0.705,	0.100,	0.016,	0.729,	0.101,	0.398),	
		600 => array(0.424,	0.342,	0.264,	0.185,	0.210,	0.220,	0.302,	0.348,	0.190,	0.706,	0.096,	0.016,	0.736,	0.098,	0.44),	
		605 => array(0.435,	0.342,	0.257,	0.175,	0.200,	0.220,	0.324,	0.384,	0.256,	0.707,	0.092,	0.016,	0.742,	0.095,	0.47),	
		610 => array(0.442,	0.342,	0.252,	0.169,	0.194,	0.220,	0.344,	0.434,	0.336,	0.707,	0.090,	0.016,	0.745,	0.093,	0.494),	
		615 => array(0.448,	0.341,	0.247,	0.164,	0.189,	0.220,	0.362,	0.482,	0.418,	0.707,	0.087,	0.016,	0.747,	0.090,	0.511),	
		620 => array(0.450,	0.341,	0.241,	0.160,	0.185,	0.223,	0.377,	0.528,	0.505,	0.708,	0.085,	0.016,	0.748,	0.089,	0.524),	
		625 => array(0.451,	0.339,	0.235,	0.156,	0.183,	0.227,	0.389,	0.568,	0.581,	0.708,	0.082,	0.016,	0.748,	0.087,	0.535),	
		630 => array(0.451,	0.339,	0.229,	0.154,	0.180,	0.233,	0.400,	0.604,	0.641,	0.710,	0.080,	0.018,	0.748,	0.086,	0.544),	
		635 => array(0.451,	0.338,	0.224,	0.152,	0.177,	0.239,	0.410,	0.629,	0.682,	0.711,	0.079,	0.018,	0.748,	0.085,	0.552),	
		640 => array(0.451,	0.338,	0.220,	0.151,	0.176,	0.244,	0.420,	0.648,	0.717,	0.712,	0.078,	0.018,	0.748,	0.084,	0.559),	
		645 => array(0.451,	0.337,	0.217,	0.149,	0.175,	0.251,	0.429,	0.663,	0.740,	0.714,	0.078,	0.018,	0.748,	0.084,	0.565),	
		650 => array(0.450,	0.336,	0.216,	0.148,	0.175,	0.258,	0.438,	0.676,	0.758,	0.716,	0.078,	0.019,	0.748,	0.084,	0.571),	
		655 => array(0.450,	0.335,	0.216,	0.148,	0.175,	0.263,	0.445,	0.685,	0.770,	0.718,	0.078,	0.020,	0.748,	0.084,	0.576),	
		660 => array(0.451,	0.334,	0.219,	0.148,	0.175,	0.268,	0.452,	0.693,	0.781,	0.720,	0.081,	0.023,	0.747,	0.085,	0.581),	
		665 => array(0.451,	0.332,	0.224,	0.149,	0.177,	0.273,	0.457,	0.700,	0.790,	0.722,	0.083,	0.024,	0.747,	0.087,	0.586),	
		670 => array(0.453,	0.332,	0.230,	0.151,	0.180,	0.278,	0.462,	0.705,	0.797,	0.725,	0.088,	0.026,	0.747,	0.092,	0.59),	
		675 => array(0.454,	0.331,	0.238,	0.154,	0.183,	0.281,	0.466,	0.709,	0.803,	0.729,	0.093,	0.030,	0.747,	0.096,	0.594),	
		680 => array(0.455,	0.331,	0.251,	0.158,	0.186,	0.283,	0.468,	0.712,	0.809,	0.731,	0.102,	0.035,	0.747,	0.102,	0.599),	
		685 => array(0.457,	0.330,	0.269,	0.162,	0.189,	0.286,	0.470,	0.715,	0.814,	0.735,	0.112,	0.043,	0.747,	0.110,	0.603),	
		690 => array(0.458,	0.329,	0.288,	0.165,	0.192,	0.291,	0.473,	0.717,	0.819,	0.739,	0.125,	0.056,	0.747,	0.123,	0.606),	
		695 => array(0.460,	0.328,	0.312,	0.168,	0.195,	0.296,	0.477,	0.719,	0.824,	0.742,	0.141,	0.074,	0.746,	0.137,	0.61),	
		700 => array(0.462,	0.328,	0.340,	0.170,	0.199,	0.302,	0.483,	0.721,	0.828,	0.746,	0.161,	0.097,	0.746,	0.152,	0.612),	
		705 => array(0.463,	0.327,	0.366,	0.171,	0.200,	0.313,	0.489,	0.720,	0.830,	0.748,	0.182,	0.128,	0.746,	0.169,	0.614),	
		710 => array(0.464,	0.326,	0.390,	0.170,	0.199,	0.325,	0.496,	0.719,	0.831,	0.749,	0.203,	0.166,	0.745,	0.188,	0.616),	
		715 => array(0.465,	0.325,	0.412,	0.168,	0.198,	0.338,	0.503,	0.722,	0.833,	0.751,	0.223,	0.210,	0.744,	0.207,	0.616),	
		720 => array(0.466,	0.324,	0.431,	0.166,	0.196,	0.351,	0.511,	0.725,	0.835,	0.753,	0.242,	0.257,	0.743,	0.226,	0.616),	
		725 => array(0.466,	0.324,	0.447,	0.164,	0.195,	0.364,	0.518,	0.727,	0.836,	0.754,	0.257,	0.305,	0.744,	0.243,	0.616),	
		730 => array(0.466,	0.324,	0.460,	0.164,	0.195,	0.376,	0.525,	0.729,	0.836,	0.755,	0.270,	0.354,	0.745,	0.260,	0.615),	
		735 => array(0.466,	0.323,	0.472,	0.165,	0.196,	0.389,	0.532,	0.730,	0.837,	0.755,	0.282,	0.401,	0.748,	0.277,	0.613),	
		740 => array(0.467,	0.322,	0.481,	0.168,	0.197,	0.401,	0.539,	0.730,	0.838,	0.755,	0.292,	0.446,	0.750,	0.294,	0.612),	
		745 => array(0.467,	0.321,	0.488,	0.172,	0.200,	0.413,	0.546,	0.730,	0.839,	0.755,	0.302,	0.485,	0.750,	0.310,	0.61),	
		750 => array(0.467,	0.320,	0.493,	0.177,	0.203,	0.425,	0.553,	0.730,	0.839,	0.756,	0.310,	0.520,	0.749,	0.325,	0.609),	
		755 => array(0.467,	0.318,	0.497,	0.181,	0.205,	0.436,	0.559,	0.730,	0.839,	0.757,	0.314,	0.551,	0.748,	0.339,	0.608),	
		760 => array(0.467,	0.316,	0.500,	0.185,	0.208,	0.447,	0.565,	0.730,	0.839,	0.758,	0.317,	0.577,	0.748,	0.353,	0.607),	
		765 => array(0.467,	0.315,	0.502,	0.189,	0.212,	0.458,	0.570,	0.730,	0.839,	0.759,	0.323,	0.599,	0.747,	0.366,	0.607),	
		770 => array(0.467,	0.315,	0.505,	0.192,	0.215,	0.469,	0.575,	0.730,	0.839,	0.759,	0.330,	0.618,	0.747,	0.379,	0.609),	
		775 => array(0.467,	0.314,	0.510,	0.194,	0.217,	0.477,	0.578,	0.730,	0.839,	0.759,	0.334,	0.633,	0.747,	0.390,	0.61),	
		780 => array(0.467,	0.314,	0.516,	0.197,	0.219,	0.485,	0.581,	0.730,	0.839,	0.759,	0.338,	0.645,	0.747,	0.399,	0.611),	
		785 => array(0.467,	0.313,	0.520,	0.200,	0.222,	0.493,	0.583,	0.730,	0.839,	0.759,	0.343,	0.656,	0.746,	0.408,	0),	
		790 => array(0.467,	0.313,	0.524,	0.204,	0.226,	0.500,	0.585,	0.731,	0.839,	0.759,	0.348,	0.666,	0.746,	0.416,	0),	
		795 => array(0.466,	0.312,	0.527,	0.210,	0.231,	0.506,	0.587,	0.731,	0.839,	0.759,	0.353,	0.674,	0.746,	0.422,	0),	
		800 => array(0.466,	0.312,	0.531,	0.218,	0.237,	0.512,	0.588,	0.731,	0.839,	0.759,	0.359,	0.680,	0.746,	0.428,	0),	
		805 => array(0.466,	0.311,	0.535,	0.225,	0.243,	0.517,	0.589,	0.731,	0.839,	0.759,	0.365,	0.686,	0.745,	0.434,	0),	
		810 => array(0.466,	0.311,	0.539,	0.233,	0.249,	0.521,	0.590,	0.731,	0.838,	0.758,	0.372,	0.691,	0.745,	0.439,	0),	
		815 => array(0.466,	0.311,	0.544,	0.243,	0.257,	0.525,	0.590,	0.731,	0.837,	0.757,	0.380,	0.694,	0.745,	0.444,	0),	
		820 => array(0.465,	0.311,	0.548,	0.254,	0.265,	0.529,	0.590,	0.731,	0.837,	0.757,	0.388,	0.697,	0.745,	0.448,	0),	
		825 => array(0.464,	0.311,	0.552,	0.264,	0.273,	0.532,	0.591,	0.731,	0.836,	0.756,	0.396,	0.700,	0.745,	0.451,	0),	
		830 => array(0.464,	0.310,	0.555,	0.274,	0.280,	0.535,	0.592,	0.731,	0.836,	0.756,	0.403,	0.702,	0.745,	0.454,	0)
	);
	
	const S = array(	
	//  nm				S_0		S_1		S_2
		360	=> array(	61.50,	38.00,	5.30	),
		365	=> array(	65.47,	40.22,	5.81	),
		370	=> array(	68.80,	42.40,	6.10	),
		375	=> array(	66.41,	40.94,	4.72	),
		380	=> array(	63.40,	38.50,	3.00	),
		385	=> array(	64.60,	36.75,	2.10	),
		390	=> array(	65.80,	35.00,	1.20	),
		395	=> array(	80.30,	39.20,	0.05	),
		400	=> array(	94.80,	43.40,	-1.10	),
		405	=> array(	99.80,	44.85,	-0.80	),
		410	=> array(	104.80,	46.30,	-0.50	),
		415	=> array(	105.34,	45.10,	-0.60	),
		420	=> array(	105.90,	43.90,	-0.70	),
		425	=> array(	101.35,	40.50,	-0.95	),
		430	=> array(	96.80,	37.10,	-1.20	),
		435	=> array(	105.35,	36.90,	-1.90	),
		440	=> array(	113.90,	36.70,	-2.60	),
		445	=> array(	119.75,	36.30,	-2.75	),
		450	=> array(	125.60,	35.90,	-2.90	),
		455	=> array(	125.55,	34.25,	-2.85	),
		460	=> array(	125.50,	32.60,	-2.80	),
		465	=> array(	123.40,	30.25,	-2.70	),
		470	=> array(	121.30,	27.90,	-2.60	),
		475	=> array(	121.30,	26.10,	-2.60	),
		480	=> array(	121.30,	24.30,	-2.60	),
		485	=> array(	117.40,	22.20,	-2.20	),
		490	=> array(	113.50,	20.10,	-1.80	),
		495	=> array(	113.30,	18.15,	-1.65	),
		500	=> array(	113.10,	16.20,	-1.50	),
		505	=> array(	111.95,	14.70,	-1.40	),
		510	=> array(	110.80,	13.20,	-1.30	),
		515	=> array(	108.65,	10.90,	-1.25	),
		520	=> array(	106.50,	8.60,	-1.20	),
		525	=> array(	107.65,	7.35,	-1.10	),
		530	=> array(	108.80,	6.10,	-1.00	),
		535	=> array(	107.05,	5.15,	-0.75	),
		540	=> array(	105.30,	4.20,	-0.50	),
		545	=> array(	104.85,	3.05,	-0.40	),
		550	=> array(	104.40,	1.90,	-0.30	),
		555	=> array(	102.20,	0.95,	-0.15	),
		560	=> array(	100.00,	0.00,	0.00	),
		565	=> array(	98.00,	-0.80,	0.10	),
		570	=> array(	96.00,	-1.60,	0.20	),
		575	=> array(	95.55,	-2.65,	0.35	),
		580	=> array(	95.10,	-3.50,	0.50	),
		585	=> array(	92.10,	-3.50,	1.30	),
		590	=> array(	89.10,	-3.50,	2.10	),
		595	=> array(	89.80,	-4.65,	2.65	),
		600	=> array(	90.50,	-5.80,	3.20	),
		605	=> array(	90.40,	-6.50,	3.65	),
		610	=> array(	90.30,	-7.20,	4.10	),
		615	=> array(	89.35,	-7.90,	4.40	),
		620	=> array(	88.40,	-8.60,	4.70	),
		625	=> array(	86.20,	-9.05,	4.90	),
		630	=> array(	84.00,	-9.50,	5.10	),
		635	=> array(	84.55,	-10.20,	5.90	),
		640	=> array(	85.10,	-10.90,	6.70	),
		645	=> array(	83.50,	-10.80,	7.00	),
		650	=> array(	81.90,	-10.70,	7.30	),
		655	=> array(	82.25,	-11.35,	7.95	),
		660	=> array(	82.60,	-12.00,	8.60	),
		665	=> array(	83.75,	-13.00,	9.20	),
		670	=> array(	84.90,	-14.00,	9.80	),
		675	=> array(	83.10,	-13.80,	10.00	),
		680	=> array(	81.30,	-13.60,	10.20	),
		685	=> array(	76.60,	-12.80,	9.25	),
		690	=> array(	71.90,	-12.00,	8.30	),
		695	=> array(	73.10,	-12.65,	8.95	),
		700	=> array(	74.30,	-13.30,	9.60	),
		705	=> array(	75.35,	-13.10,	9.05	),
		710	=> array(	76.40,	-12.90,	8.50	),
		715	=> array(	69.85,	-11.75,	7.75	),
		720	=> array(	63.30,	-10.60,	7.00	),
		725	=> array(	67.50,	-11.10,	7.30	),
		730	=> array(	71.70,	-11.60,	7.60	),
		735	=> array(	74.35,	-11.90,	7.80	),
		740	=> array(	77.00,	-12.20,	8.00	),
		745	=> array(	71.10,	-11.20,	7.35	),
		750	=> array(	65.20,	-10.20,	6.70	),
		755	=> array(	56.45,	-9.00,	5.95	),
		760	=> array(	47.70,	-7.80,	5.20	),
		765	=> array(	58.15,	-9.50,	6.30	),
		770	=> array(	68.60,	-11.20,	7.40	),
		775	=> array(	66.80,	-10.80,	7.10	),
		780	=> array(	65.00,	-10.40,	6.80	),
		785	=> array(	65.60,	-10.50,	6.90	),
		790	=> array(	66.00,	-10.60,	7.00	),
		795	=> array(	64.05,	-10.25,	6.80	),
		800	=> array(	61.00,	-9.70,	6.40	),
		805	=> array(	56.50,	-8.90,	5.90	),
		810	=> array(	53.30,	-8.30,	5.50	),
		815	=> array(	55.45,	-8.70,	5.70	),
		820	=> array(	58.90,	-9.30,	6.10	),
		825	=> array(	61.70,	-9.80,	6.45	),
		830	=> array(	61.90,	-9.80,	6.50	)
	);
}
?>
